import React, { useState } from "react";
import {
  Card,
  Col,
  Container,
  Form,
  Row,
  Table,
  Button,
  Modal,
  Breadcrumb,
  Pagination,
} from "react-bootstrap";
import "../../../css/customStyle.css";
import { Head, Link } from "@inertiajs/react";
import BreadCrumb from "../../../Components/Common/BreadCrumb";
import Layout from "../../../Layouts";
import { ToastContainer, toast, Slide } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import CLBreadCrumb from "../../../Component/Backend/CLBreadCrumb";
     

             // event(new Registered($user));
        // event(new CustomerRegisterEvent($user));

        // ProcessOtpEmail::dispatch( $user);
        // event(new CustomerRegisterEvent($userInfo));

        // ProcessOtpEmail::dispatch($userInfo);




<?php

namespace App\Mail;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Mail\Mailable;
use Illuminate\Mail\Mailables\Content;
use Illuminate\Mail\Mailables\Envelope;
use Illuminate\Queue\SerializesModels;
 
class CustomerVerifyEmailOtp extends Mailable {
    use Queueable, SerializesModels;

    public $otp_code;
 
    /**
     * Create a new message instance.
     */
    public function __construct($otp_code)
    {
        $this->otp_code = $otp_code;
    }

    /**
     * Get the message envelope.
     */
    public function envelope(): Envelope
    {
        return new Envelope(
            subject: 'Customer Verify Email Otp',
        );
    }

    /**
     * Get the message content definition.
     */
    public function content(): Content
    {
        return new Content(
            view: 'emailsend',
        );
    }

    /**
     * Get the attachments for the message.
     *
     * @return array<int, \Illuminate\Mail\Mailables\Attachment>
     */
    public function attachments(): array
    {
        return [];
    }
}
?>









        

    protected $listen = [
        Registered::class => [
            SendEmailVerificationNotification::class,
        ],
        CustomerRegisterEvent::class => [
            CustomerRegisterListener::class,
        ],
    ];



function Manage() {
  const [modal_animationFlip, setmodal_animationFlip] =
    useState<boolean>(false);
  const [toast8, setToast8] = useState<boolean>(false);

  const tog_animationFlip = () => setmodal_animationFlip(!modal_animationFlip);

  const firstRun = () => {
    toast.success("Wow so easy!", {
      position: "top-right",
      autoClose: 1000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "light",
      transition: Slide,
    });
  };

  return (
    <React.Fragment>
      <Head title="Starter | Velzon - React Admin & Dashboard Template" />
      <div className="page-content">
        <Container fluid>
          <CLBreadCrumb title="Starter" pageTitle="Pages" />
          {/* <BreadCrumb title="Starter" pageTitle="Pages" /> */}

          <Breadcrumb>
            <Breadcrumb.Item href="#">
              <i className="ri-home-5-fill" />
            </Breadcrumb.Item>
            <Breadcrumb.Item href="#">Base UI</Breadcrumb.Item>
            <Breadcrumb.Item className="breadcrumb-general">
              {" "}
              General{" "}
            </Breadcrumb.Item>
          </Breadcrumb>

          <Row>
            <Col xs={12}>
              <Card>
                <Card.Header className="align-items-center d-flex">
                  <h4 className="card-title mb-0 flex-grow-1">User Manage</h4>
                  <div className="flex-shrink-0">
                    <div className="d-flex justify-content-sm-end">
                      <div className="search-box ms-2 search-box-custom-width ">
                        <Form.Control
                          type="text"
                          className="form-control"
                          id="searchResultList"
                          placeholder="Search for jobs..."
                        />
                        <i className="ri-search-line search-icon"></i>
                      </div>
                    </div>
                  </div>
                </Card.Header>

                <Card.Body>
                  <div className="live-preview">
                    <div className="table-responsive">
                      <Table className="table-bordered table-hover table-striped align-middle table-nowrap mb-0">
                        <thead>
                          <tr>
                            <th scope="col">ID</th>
                            <th scope="col">Title</th>
                            <th scope="col">Status</th>
                            <th scope="col">Assignee</th>
                            <th scope="col">Price</th>
                            <th scope="col">Action</th>
                          </tr>
                        </thead>
                        <tbody>
                          <tr>
                            <td className="fw-medium">01</td>
                            <td>Implement new UX</td>
                            <td>
                              <span className="badge bg-primary-subtle text-primary">
                                Backlog
                              </span>
                            </td>
                            <td>
                              <span className="badge bg-success-subtle text-success">
                                Active
                              </span>
                            </td>

                            <td>$4,521</td>
                            <td>
                              <div className="hstack gap-3 flex-wrap">
                                <Link href="#" className="link-success fs-15">
                                  <i className="ri-edit-2-line"></i>
                                </Link>
                                <Link href="#" className="link-danger fs-15">
                                  <i className="ri-delete-bin-line"></i>
                                </Link>
                              </div>
                            </td>
                          </tr>
                          <tr>
                            <td className="fw-medium">02</td>
                            <td>Design syntax</td>
                            <td>
                              <div className="form-check form-switch">
                                <Form.Check.Input
                                  className="form-check-input"
                                  type="checkbox"
                                  role="switch"
                                  id="SwitchCheck2"
                                />
                                <Form.Check.Label
                                  className="form-check-label ms-2"
                                  htmlFor="SwitchCheck2"
                                >
                                  Yes/No
                                </Form.Check.Label>
                              </div>
                            </td>
                            <td>
                              <span className="badge bg-danger-subtle  text-danger">
                                Disabled
                              </span>
                            </td>

                            <td>$7,546</td>
                            <td>
                              <div className="dropdown">
                                <Link
                                  href="#"
                                  role="button"
                                  id="dropdownMenuLink2"
                                  data-bs-toggle="dropdown"
                                  aria-expanded="false"
                                >
                                  <i className="ri-more-2-fill"></i>
                                </Link>

                                <ul
                                  className="dropdown-menu"
                                  aria-labelledby="dropdownMenuLink2"
                                >
                                  <li>
                                    <Link className="dropdown-item" href="#">
                                      View
                                    </Link>
                                  </li>
                                  <li>
                                    <Link className="dropdown-item" href="#">
                                      Edit
                                    </Link>
                                  </li>
                                  <li>
                                    <Link className="dropdown-item" href="#">
                                      Delete
                                    </Link>
                                  </li>
                                </ul>
                              </div>
                            </td>
                          </tr>
                          <tr>
                            <td className="fw-medium">03</td>
                            <td>Configurable resources</td>
                            <td>
                              <span className="badge bg-success-subtle text-success">
                                Done
                              </span>
                            </td>
                            <td>Florence Guzman</td>
                            <td>$1,350</td>
                            <td>
                              <div className="dropdown">
                                <Link
                                  href="#"
                                  role="button"
                                  id="dropdownMenuLink3"
                                  data-bs-toggle="dropdown"
                                  aria-expanded="false"
                                >
                                  <i className="ri-more-2-fill"></i>
                                </Link>

                                <ul
                                  className="dropdown-menu"
                                  aria-labelledby="dropdownMenuLink3"
                                >
                                  <li>
                                    <Link className="dropdown-item" href="#">
                                      View
                                    </Link>
                                  </li>
                                  <li>
                                    <Link className="dropdown-item" href="#">
                                      Edit
                                    </Link>
                                  </li>
                                  <li>
                                    <Link className="dropdown-item" href="#">
                                      Delete
                                    </Link>
                                  </li>
                                </ul>
                              </div>
                            </td>
                          </tr>
                          <tr>
                            <td className="fw-medium">04</td>
                            <td>Implement extensions</td>
                            <td>
                              <span className="badge bg-secondary-subtle text-secondary ">
                                In Progress
                              </span>
                            </td>
                            <td>Maritza Blanda</td>
                            <td>$4,521</td>
                            <td>
                              <div className="dropdown">
                                <Link
                                  href="#"
                                  role="button"
                                  id="dropdownMenuLink4"
                                  data-bs-toggle="dropdown"
                                  aria-expanded="false"
                                >
                                  <i className="ri-more-2-fill"></i>
                                </Link>

                                <ul
                                  className="dropdown-menu"
                                  aria-labelledby="dropdownMenuLink4"
                                >
                                  <li>
                                    <Link className="dropdown-item" href="#">
                                      View
                                    </Link>
                                  </li>
                                  <li>
                                    <Link className="dropdown-item" href="#">
                                      Edit
                                    </Link>
                                  </li>
                                  <li>
                                    <Link className="dropdown-item" href="#">
                                      Delete
                                    </Link>
                                  </li>
                                </ul>
                              </div>
                            </td>
                          </tr>
                        </tbody>
                      </Table>

                      <Button
                        className="btn btn-success"
                        id="borderedToast2Btn"
                        onClick={() => firstRun()}
                      >
                        Success Toast
                      </Button>

                      <ToastContainer
                        position="top-right"
                        autoClose={1000}
                        hideProgressBar={false}
                        newestOnTop={false}
                        closeOnClick={true}
                        rtl={false}
                        pauseOnFocusLoss
                        draggable
                        pauseOnHover
                        theme="light"
                        transition={Slide}
                      />

                      <Button
                        variant="primary"
                        onClick={() => tog_animationFlip()}
                      >
                        Flip Modal
                      </Button>

                      <Modal
                        id="flipModal"
                        show={modal_animationFlip}
                        onHide={() => {
                          tog_animationFlip();
                        }}
                        className="flip"
                      >
                        <Modal.Header closeButton>
                          <Modal.Title>Delete User</Modal.Title>
                        </Modal.Header>
                        <Modal.Body>
                          <h5 className="fs-16">
                            Are you sure you want to delete this item?
                          </h5>
                          <p className="text-muted">
                            Deleting this data will remove all related data
                            permanently. This includes account information,
                            activity history, and any linked records. Once
                            deleted, this action cannot be undone. Please
                            confirm before proceeding.
                          </p>
                        </Modal.Body>
                        <Modal.Footer>
                          <Button
                            variant="light"
                            onClick={() => {
                              tog_animationFlip();
                            }}
                          >
                            {" "}
                            Close{" "}
                          </Button>
                          <Button variant="primary"> Delete </Button>
                        </Modal.Footer>
                      </Modal>
                    </div>
                  </div>
                  <div className="mt-3 d-flex justify-content-sm-end">
                    <Pagination>
                      <Pagination.Item className="disabled">
                        ← Prev
                      </Pagination.Item>
                      <Pagination.Item>{1}</Pagination.Item>
                      <Pagination.Item active>{2}</Pagination.Item>
                      <Pagination.Item>{3}</Pagination.Item>
                      <Pagination.Item>Next →</Pagination.Item>
                    </Pagination>
                  </div>
                </Card.Body>
              </Card>
            </Col>
          </Row>
        </Container>
      </div>
    </React.Fragment>
  );
}
Manage.layout = (page: any) => <Layout children={page} />;
export default Manage;





// interface PageLink {
//   url: string | null;
//   label: string;
//   active: boolean;
// }

// interface CLPaginationProps {
//   pages: PageLink[];
// }


//import { memo, useCallback } from "react";
//import { Pagination } from "react-bootstrap";
//import { router } from "@inertiajs/react";
//import { PageLink } from "../../type/userProps";

//function CLPagination({ pages }: { pages: PageLink[] }) {
//  if (!pages?.length) return null;

//  const handleDynamicRoute = useCallback((routeLink: string | null) => {
//    if (routeLink && routeLink !== "#" && routeLink !== "") {
//      router.visit(routeLink, { method: "get" });
//    }
//  }, []);

//  return (
//    <Pagination>
//      {pages.map((item, index) => {
//         const isDisabled = !item.url || item.url === "#" || item.url === "";
//         const displayLabel =
//           item.label === "&laquo; Previous"
//             ? "← আগের"
//             : item.label === "Next &raquo;"
//             ? "পরের →"
//             : item.label;

//         return (
//           <Pagination.Item
//             key={item.url ?? `page-${index}`}
//             onClick={() => handleDynamicRoute(item.url)}
//             active={item.active}
//             disabled={isDisabled}
//           >
//             {displayLabel}
//           </Pagination.Item>
//         );
//       })}
//     </Pagination>
//   );
// }

// export default memo(CLPagination);




// import { memo } from "react";
// import { Pagination } from "react-bootstrap";
// import { router } from "@inertiajs/react";

// interface PageLink {
//   url: string | null;
//   label: string;
//   active: boolean;
// }

// function CLPagination({ pages }: { pages: PageLink[] }) {
//   const handleDynamicRoute = (routeLink: string) => {
//     if (routeLink !== "#") {
//       router.visit(routeLink, { method: "get" });
//     }
//   };

//   return (
//     <Pagination>
//       {pages?.map((item, index) => (
//         <Pagination.Item
//           key={index}
//           onClick={() => handleDynamicRoute(item.url || "#")}
//           className={
//             !item.url || item.url === "#" || item.url === "" ? "disabled" : ""
//           }
//           active={item.active}
//         >
//           {item.label === "&laquo; Previous"
//             ? "← Prev"
//             : item.label === "Next &raquo;"
//             ? "Next →"
//             : item.label}
//         </Pagination.Item>
//       ))}
//     </Pagination>
//   );
// }

// export default memo(CLPagination);




 {/* <Modal
                        id="flipModal"
                        show={modalFlip}
                        onHide={() => {
                          setModalFlip(false);
                        }}
                        className="flip"
                      >
                        <Modal.Header closeButton>
                          <Modal.Title>Delete User</Modal.Title>
                        </Modal.Header>
                        <Modal.Body>
                          <h5 className="fs-16">
                            Are you sure you want to delete this item?
                          </h5>
                          <p className="text-muted">
                            Deleting this data will remove all related data
                            permanently. This includes account information,
                            activity history, and any linked records. Once
                            deleted, this action cannot be undone. Please
                            confirm before proceeding.
                          </p>
                        </Modal.Body>
                        <Modal.Footer>
                          <Button
                            variant="light"
                            onClick={() => {
                              setModalFlip(false);
                            }}
                          >
                            {" "}
                            Close{" "}
                          </Button>

                          <form onSubmit={handleDeleteUser}>
                            <Button type="submit" variant="primary">
                              {" "}
                              Delete{" "}
                            </Button>
                          </form>
                        </Modal.Footer>
                      </Modal> */}



  // const handleDeleteUser: FormEventHandler = (e) => {
  //   e.preventDefault();

  //   if (userId !== 0) {
  //     let url = new URL(window.location.href);
  //     let currentPage = url.searchParams.get("page")
  //       ? url.searchParams.get("page")
  //       : 1;
  //     let searchInput = url.searchParams.get("search") || "__BLANK__";

  //     destroy(
  //       route("admin.user.destroy", {
  //         id: userId,
  //         pageNumber: currentPage,
  //         search: searchInput,
  //       }),
  //       {
  //         preserveScroll: true,
  //         onSuccess: () => {
  //           setUserId(0);
  //           setModalFlip(false);
  //         },
  //       }
  //     );
  //   }
  // };





{/* <li className="menu-title">
        <span data-key="t-menu">Demo Menu </span>
      </li>

      <li className="nav-item">
        <Link className="nav-link menu-link" href="/#">
          <i className="ri-honour-line"></i> <span>Demo Widgets</span>
        </Link>
      </li>

      <li className="nav-item">
        <Link
          onClick={handleClick}
          className="nav-link menu-link"
          href="/#"
          data-bs-toggle="collapse"
        >
          <i className="ri-rocket-line"></i>
          <span data-key="t-apps">Landing</span>
        </Link>
        <Collapse className="menu-dropdown" in={isLanding}>
          <div>
            <ul className="nav nav-sm flex-column test">
              <li className="nav-item">
                <Link href="/#" className="nav-link">
                  One Page
                </Link>
              </li>

              <li className="nav-item">
                <Link href="/#" className="nav-link">
                  NFT Landing
                </Link>
              </li>

              <li className="nav-item">
                <Link href="/#" className="nav-link">
                  Job
                </Link>
              </li>
            </ul>
          </div>
        </Collapse>
      </li> */}


  // const handleDeleteUser: FormEventHandler = (e) => {
  //   e.preventDefault();

  //   if (userId !== 0) {
  //     if (modalType === "search") {
  //       let url = new URL(window.location.href);
  //       let currentPage = url.searchParams.get("page")
  //         ? url.searchParams.get("page")
  //         : 1;
  //       let searchInput = url.searchParams.get("search") || "__BLANK__";

  //       destroy(
  //         route(routeLink, {
  //           id: userId,
  //           pageNumber: currentPage,
  //           search: searchInput,
  //         }),
  //         {
  //           preserveScroll: true,
  //           onSuccess: () => handleModalState("2"),
  //         }
  //       );
  //     } else {
  //       destroy(
  //         route(routeLink, {
  //           id: userId,
  //         }),
  //         {
  //           preserveScroll: true,
  //           onSuccess: () => handleModalState("2"),
  //         }
  //       );
  //     }
  //   }
  // };



                    <Pagination>
                      {pages?.map((item, index) => (
                        <Pagination.Item
                          key={index}
                          onClick={() => handleDynamicRoute(item.url || "#")}
                          className={
                            !item.url || item.url === "#" || item.url === ""
                              ? "disabled"
                              : ""
                          }
                          active={item.active}
                        >
                          {item.label === "&laquo; Previous"
                            ? "← Prev"
                            : item.label === "Next &raquo;"
                            ? "Next →"
                            : item.label}
                        </Pagination.Item>
                      ))}
                    </Pagination>







  const sendMessage = () => {
    if (!messageInput.trim()) return;

    let userMessageInfo;

    if (localStorage.getItem("userMessageInfo")) {
      let userData = JSON.parse(
        localStorage.getItem("userMessageInfo") ?? "{}"
      );

      if (userData.message_time == "") {
        let msgTime = Date.now();
        localStorage.setItem(
          "userMessageInfo",
          JSON.stringify({ ...userData, message_time: msgTime.toString() })
        );
      }

      userMessageInfo = JSON.parse(
        localStorage.getItem("userMessageInfo") ?? "{}"
      );
      
    } else {
      let msgTime = Date.now();
      let userInfo = {
        customer_id: customerId,
        user_id: "",
        message_time: msgTime.toString(),
      };
      localStorage.setItem("userMessageInfo", JSON.stringify(userInfo));

      userMessageInfo = userInfo;
    }

    let messageformate = {
      customer_id: userMessageInfo?.customer_id,
      user_id: userMessageInfo?.user_id,
      message_time: userMessageInfo?.message_time,
      roleType: "customer",
      message: messageInput,
    };

    console.log("messageformate", messageformate);

    const newMessage = {
      id: messages.length + 1,
      type: "user",
      text: messageInput,
      time: getCurrentTime(),
    };

    setMessages([...messages, newMessage]);
    setMessageInput("");

    // Show typing indicator
    setTimeout(() => {
      setIsTyping(true);

      // Simulate response
      setTimeout(() => {
        setIsTyping(false);
        const supportResponse = {
          id: messages.length + 2,
          type: "support",
          text: "Thanks for your message! Our team will respond shortly.",
          time: getCurrentTime(),
        };
        setMessages((prev) => [...prev, supportResponse]);
      }, 2000);
    }, 500);
  };







  const handleIsOpen = () => {
    setIsOpen(!isOpen);

    if (localStorage.getItem("userMessageInfo")) {
      if (customerId == "") {
        let customerInfo = JSON.parse(
          localStorage.getItem("userMessageInfo") ?? "{}"
        );
        setCustomerId(customerInfo.customer_id);
      }
    } else {
      let customer_id = customerUniqueId();
      setCustomerId(customer_id);
    }

    if (!isOpen == false && localStorage.getItem("userMessageInfo")) {
      // console.log("rm_______time");

      let userMessageInfo = JSON.parse(
        localStorage.getItem("userMessageInfo") ?? "{}"
      );

      localStorage.setItem(
        "userMessageInfo",
        JSON.stringify({ ...userMessageInfo, message_time: "", user_id: "" })
      );
    }
  };

  useEffect(() => {
    if (localStorage.getItem("userMessageInfo")) {
      let userMessageInfo = JSON.parse(
        localStorage.getItem("userMessageInfo") ?? "{}"
      );

      localStorage.setItem(
        "userMessageInfo",
        JSON.stringify({ ...userMessageInfo, message_time: "", user_id: "" })
      );
    }
  }, []);









    <ul
                            className="list-unstyled chat-list chat-user-list users-list"
                            id="userList"
                          >
                            {(chats || []).map(
                              (chatContact: chatContactType) =>
                                chatContact.direactContact &&
                                (chatContact.direactContact || [])?.map(
                                  (chat) => (
                                    <li
                                      key={chat.id + chat.status}
                                      className={
                                        Chat_Box_Username === chat.name
                                          ? "active"
                                          : ""
                                      }
                                    >
                                      <Link
                                        href="#!"
                                        onClick={(event) => {
                                          event.preventDefault();
                                          userChatOpen(chat);
                                        }}
                                        className={
                                          chat.badge && chat.badge !== 0
                                            ? "unread-msg-user"
                                            : ""
                                        }
                                        id={"msgUser" + chat.id}
                                      >
                                        <div className="d-flex align-items-center">
                                          <div
                                            className={`flex-shrink-0 chat-user-img ${
                                              chat.status === "Online"
                                                ? "online"
                                                : "away"
                                            } align-self-center me-2 ms-0`}
                                          >
                                            <div className="avatar-xxs">
                                              {chat.image ? (
                                                <img
                                                  src={chat.image}
                                                  className="rounded-circle img-fluid userprofile"
                                                  alt=""
                                                />
                                              ) : (
                                                <div
                                                  className={
                                                    "avatar-title rounded-circle bg-" +
                                                    chat.bgColor +
                                                    " userprofile"
                                                  }
                                                >
                                                  {chat.name.charAt(0)}
                                                </div>
                                              )}
                                            </div>
                                            <span className="user-status"></span>
                                          </div>
                                          <div className="overflow-hidden flex-grow-1">
                                            <p className="mb-0 text-truncate">
                                              {chat.name}
                                            </p>
                                          </div>
                                          {chat.badge && (
                                            <div
                                              className="flex-shrink-0"
                                              id={"unread-msg-user" + chat.id}
                                            >
                                              <span className="p-1 rounded badge bg-dark-subtle text-body">
                                                {chat.badge}
                                              </span>
                                            </div>
                                          )}
                                        </div>
                                      </Link>
                                    </li>
                                  )
                                )
                            )}
                          </ul>





  // delete this
  useEchoPublic(`customer-message-list`, "MessageListEvent", (wsStore: any) => {
    let findOldCustomer = allcustomer.find(
      (el: any) => el.customer_id == wsStore.data.customer_id
    );

    if (findOldCustomer) {
      let oldData = allcustomer
        .map((c: any) =>
          String(c.customer_id) === String(wsStore.data.customer_id)
            ? { ...c, message_count: c.message_count + 1 }
            : c
        )
        .sort((a: any, b: any) => {
          let x = a.message_time;
          let y = b.message_time;
          if (x < y) {
            return 1;
          }
          if (x > y) {
            return -1;
          }
          return 0;
        });

      setAllcustomer(oldData);

      // setAllcustomer((prev: any[]) =>
      //   prev.map((c: any) =>
      //     String(c.customer_id) === String(wsStore.data.customer_id)
      //       ? { ...c, message_count: c.message_count + 1 }
      //       : c
      //   )
      // );
    } else {
      // setAllcustomer((prev: any) => [
      // ...prev,
      // {
      //   ...wsStore.data,
      //   message_count: 1,
      // },
      // ]);

      let oldData = [
        ...allcustomer,
        {
          ...wsStore.data,
          message_count: 1,
        },
      ].sort((a: any, b: any) => {
        let x = a.message_time;
        let y = b.message_time;
        if (x < y) {
          return 1;
        }
        if (x > y) {
          return -1;
        }
        return 0;
      });

      setAllcustomer(oldData);
    }

    // console.log("ws-data => ", wsStore);
  });



      {(allcustomer.length != 0 ? allcustomer : [])?.map(
                              (customer: any) => (
                                <li
                                  key={customer.customer_id}
                                  className={
                                    Chat_Box_Username == customer.customer_id
                                      ? "active"
                                      : ""
                                  }
                                >
                                  <Link
                                    href="#!"
                                    onClick={(event) => {
                                      event.preventDefault();
                                      // userChatOpen(chat);
                                    }}
                                    // className={
                                    //   chat.badge && chat.badge !== 0
                                    //     ? "unread-msg-user"
                                    //     : ""
                                    // }
                                    id={"msgUser" + customer.customer_id}
                                  >
                                    <div className="d-flex align-items-center">
                                      <div
                                        className={`flex-shrink-0 chat-user-img ${
                                          customer.customer_id === "Online"
                                            ? "online"
                                            : "away"
                                        } align-self-center me-2 ms-0`}
                                      >
                                        <div className="avatar-xxs">
                                          <img
                                            src={avatar3}
                                            className="rounded-circle img-fluid userprofile"
                                            alt="User Photo"
                                          />
                                        </div>
                                        <span className="user-status"></span>
                                      </div>
                                      <div className="overflow-hidden flex-grow-1">
                                        <p className="mb-0 text-truncate">
                                          {customer.customer_id.split("-1")[1]}
                                        </p>
                                      </div>
                                      {customer.message_count != 0 && (
                                        <div className="flex-shrink-0">
                                          <span className="p-1 rounded badge bg-dark-subtle text-body">
                                            {customer.message_count}
                                          </span>
                                        </div>
                                      )}
                                    </div>
                                  </Link>
                                </li>
                              )
                            )}





  <li
                                    key={customer.customer_id}
                                    className={
                                      Chat_Box_Username == customer.customer_id
                                        ? "active"
                                        : ""
                                    }
                                  >
                                    <Link
                                      href="#!"
                                      onClick={(event) => {
                                        event.preventDefault();
                                        // userChatOpen(chat);
                                      }}
                                      // className={
                                      //   chat.badge && chat.badge !== 0
                                      //     ? "unread-msg-user"
                                      //     : ""
                                      // }
                                      id={"msgUser" + customer.customer_id}
                                    >
                                      <div className="d-flex align-items-center">
                                        <div
                                          className={`flex-shrink-0 chat-user-img ${
                                            customer.customer_id === "Online"
                                              ? "online"
                                              : "away"
                                          } align-self-center me-2 ms-0`}
                                        >
                                          <div className="avatar-xxs">
                                            <img
                                              src={avatar3}
                                              className="rounded-circle img-fluid userprofile"
                                              alt="User Photo"
                                            />
                                          </div>
                                          <span className="user-status"></span>
                                        </div>
                                        <div className="overflow-hidden flex-grow-1">
                                          <p className="mb-0 text-truncate">
                                            {
                                              customer.customer_id.split(
                                                "-1"
                                              )[1]
                                            }
                                          </p>
                                        </div>
                                        {customer.message_count != 0 && (
                                          <div className="flex-shrink-0">
                                            <span className="p-1 rounded badge bg-dark-subtle text-body">
                                              {customer.message_count}
                                            </span>
                                          </div>
                                        )}
                                      </div>
                                    </Link>
                                  </li>



        // $customers = DB::table('conversations')->orderBy('message_time', 'desc')->get();

        // $customers = DB::table('conversations')
        //     ->select('conversations.*')
        //     ->whereIn('id', function ($query) {
        //         $query->select(DB::raw('MAX(id)'))
        //             ->from('conversations')
        //             ->groupBy('customer_id');
        //     })
        //     ->orderBy('message_time', 'desc')
        //     ->get();

        // event(new CheckMessageEvent($customers));


        // $customers = DB::table('conversations')
        //     ->select(
        //         'conversations.*',
        //         DB::raw('(SELECT COUNT(*) FROM conversations AS c2 WHERE c2.customer_id = conversations.customer_id) AS message_count')
        //     )
        //     ->whereIn('id', function ($query) {
        //         $query->select(DB::raw('MAX(id)'))
        //             ->from('conversations')
        //             ->groupBy('customer_id');
        //     })
        //     ->orderBy('message_time', 'desc')
        //     ->get();

        // return Inertia::render('Admin/Chat/index', ["customers" => $customers]);






